"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const bi_map_1=require("../bi-map");describe("Initialization",()=>{test("Basic initialization.",()=>{new bi_map_1.BiMap})}),describe("Per-method Tests",()=>{let e;beforeEach(()=>{(e=new bi_map_1.BiMap).set("one",1),e.set("two",2),e.set("three",3)}),describe("#get",()=>{test("Regular key --\x3e value retrieval returns expected value.",()=>{expect(e.get("one")).toBe(1),expect(e.get("two")).toBe(2),expect(e.get("three")).toBe(3)}),test("Attempt to get non-existent value returns undefined.",()=>{expect(e.get("zero")).toBeUndefined(),expect(e.get("four")).toBeUndefined()})}),describe("#set",()=>{test("Regular set does not error/fail.",()=>{e.set("four",4)}),test("Set-get relationship is properly reflexive.",()=>{e.set("five",5),expect(e.getFromKey("five")).toBe(5),expect(e.getFromValue(5)).toBe("five")}),test("Set operation successfully overwrites previously held keys.",()=>{e.set("two",10),expect(e.getFromKey("two")).toBe(10),expect(e.getFromValue(10)).toBe("two"),expect(e.getFromValue(2)).toBeUndefined()})}),describe("#getFromKey",()=>{test("Regular key --\x3e value retrieval returns expected value.",()=>{expect(e.getFromKey("one")).toBe(1),expect(e.getFromKey("two")).toBe(2),expect(e.getFromKey("three")).toBe(3)}),test("Attempt to get non-existent value returns undefined.",()=>{expect(e.getFromKey("zero")).toBeUndefined(),expect(e.getFromKey("four")).toBeUndefined()})}),describe("#getFromValue",()=>{test("",()=>{})}),describe("#setFromKey",()=>{}),describe("#setFromValue",()=>{}),describe("#removeByKey",()=>{}),describe("#removeByValue",()=>{}),describe("#hasKey",()=>{}),describe("#hasValue",()=>{}),describe("#clear",()=>{})});
//# sourceMappingURL=bi-map.test.js.map
